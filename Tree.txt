Veri Yapıları-TREE
Ağaçlar (trees), veri yapılarında hiyerarşik bir düzeni temsil eden, genellikle düğümlerden (nodes) oluşan ve birbirine bağlı bir yapı olarak tanımlanır.

Bazı Kavramlar:
1-Düğüm (Node): Ağaçtaki her bir eleman bir düğümdür. Her düğüm, veri ve diğer düğümleri işaret eden bağlantılar içerir.
2-Kök Düğüm (Root Node): Ağacın en üst seviyesindeki düğümdür. Ağacın başlangıç noktasıdır ve yalnızca bir tane kök düğüm bulunur.
3-Çocuk Düğüm (Child Node): Bir düğümün işaret ettiği alt düğümler çocuk düğümler olarak adlandırılır.
4-Ebeveyn Düğüm (Parent Node): Bir çocuk düğümünü işaret eden üst düğüm.
5-Yaprak Düğüm (Leaf Node): Çocuk düğümü olmayan düğümlerdir.
6-Derinlik (Depth): Bir düğümün kök düğümden itibaren kaç seviyede olduğunu gösterir.
7-Yükseklik (Height): Bir düğümden yapraklara kadar olan en uzun yolun uzunluğudur.

Ağaç Türleri:
İkili Ağaç (Binary Tree):Her düğümün en fazla iki çocuğu olabilir.Çocuklar genellikle "sol" ve "sağ" olarak adlandırılır.
Tam İkili Ağaç (Full Binary Tree):Her düğüm ya iki çocuğa sahiptir ya da yaprak düğümdür.
Tam Ağaç (Complete Binary Tree):Tüm seviyeler, son seviye hariç, tamamen doldurulmuştur. Son seviye ise mümkün olduğunca soldan doldurulur.
İkili Arama Ağacı (Binary Search Tree - BST):Sol alt ağaçtaki her düğüm kök düğümden küçük, sağ alt ağaçtaki her düğüm kök düğümden büyüktür.
AVL Ağaçları:Dengeli ikili arama ağaçlarının bir türüdür. Her düğümdeki yükseklik farkı en fazla 1 olabilir.
B-Ağaçları (B-Trees):Disk tabanlı sistemlerde kullanılan, geniş dallanmaya izin veren bir ağaç yapısıdır.

Dolaşma (Traversal):
Preorder (Kök-Sol-Sağ): Önce kök düğüm ziyaret edilir, ardından sol ve sağ alt ağaçlar.
Inorder (Sol-Kök-Sağ): Sıralı çıktılar almak için kullanılır.
Postorder (Sol-Sağ-Kök): Alt ağaçların tamamı ziyaret edildikten sonra kök düğüm ziyaret edilir.
Level Order: Her seviye sırayla gezilir.

Traversal Alıştırmaları:
1)
        A
       / \
      B   C
     / \   \
    D   E   F

Preorder: A → B → D → E → C → F
Inorder: D → B → E → A → C → F
Postorder: D → E → B → F → C → A

2)
           1
         /   \
        2     3
       / \   / \
      4   5 6   7

Preorder: 1 → 2 → 4 → 5 → 3 → 6 → 7
Inorder: 4 → 2 → 5 → 1 → 6 → 3 → 7
Postorder: 4 → 5 → 2 → 6 → 7 → 3 → 1

3)
            10
          /    \
        20      30
       /  \    /  \
      40  50  60  70

Preorder: 10 → 20 → 40 → 50 → 30 → 60 → 70
Inorder: 40 → 20 → 50 → 10 → 60 → 30 → 70
Postorder: 40 → 50 → 20 → 60 → 70 → 30 → 10

4)
            M
           / \
          N   O
         / \
        P   Q

Preorder: M → N → P → Q → O
Inorder: P → N → Q → M → O
Postorder: P → Q → N → O → M

5)
        H
       / \
      I   J
         / \
        K   L

Preorder: H → I → J → K → L
Inorder: I → H → K → J → L
Postorder: I → K → L → J → H

6)
              8
           /     \
         3         10
        / \          \
       1   6         14
          / \       /
         4   7     13

Preorder: 8 → 3 → 1 → 6 → 4 → 7 → 10 → 14 → 13
Inorder: 1 → 3 → 4 → 6 → 7 → 8 → 10 → 13 → 14
Postorder: 1 → 4 → 7 → 6 → 3 → 13 → 14 → 10 → 8










